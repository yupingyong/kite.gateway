@page "/Node"
@using Kite.Gateway.Application.Contracts
@using Kite.Gateway.Application.Contracts.Dtos.Node
@using Mapster
@using Kite.Gateway.Domain.Shared.Enums
@inject ToastService ToastService
@inject INodeAppService NodeAppService

<div class="row">
    <div class="col=12">
        <Button OnClick="@OnAddAsync" Color="Color.Primary">添加节点</Button>
        <Button OnClick="@OnRefreshAsync" Color="Color.Success">刷新节点配置数据</Button>
    </div>
</div>
<div class="row" style="margin-top:10px;">
    <table class="table">
      <thead class="table-light">
        <tr>
            <th>节点名称</th>
            <th>节点服务端地址</th>
            <th>授权访问Token</th>
            <th>描述</th>
            <th>创建时间</th>
            <th>更新时间</th>
            <th>操作</th>
        </tr>
      </thead>
      <tbody>
          @if(Nodes!=null&&Nodes.Any())
          {
              foreach(var item in Nodes)
              {
                <tr>
                    <td>@item.NodeName</td>
                    <td>@item.Server</td>
                    <td>@item.AccessToken</td>
                    <td>@item.Description</td>
                    <td>@item.Created</td>
                    <td>@item.Updated</td>
                    <td>
                        <div class="btn-group" role="group">
                            <Button Color="Color.Info" Size="Size.ExtraSmall" OnClick="@(e=>OnUpdateAsync(item.Id))">编辑</Button>
                            <PopConfirmButton  Size="Size.ExtraSmall" Placement="Placement.Bottom" Color="Color.Danger" ConfirmIcon="fa fa-exclamation-triangle text-danger"
                  ConfirmButtonColor="Color.Danger" Text="删除" Content="确定删除数据吗？" Icon="fa fa-fa fa-fw" IsAsync="true"
                  OnConfirm="@(()=>OnDeleteAsync(item.Id))" />
                        </div>
                    </td>
                </tr>
              }
            }
        </tbody>
    </table>
    
</div>
<div class="row col-12"  style="margin-top:15px;">
    <Pagination PageItems="@PageSize" PageItemsSource="@(new int[] { 10,20 })" TotalCount="@TotalCount" OnPageClick="@OnPageClick" OnPageItemsChanged="@OnPageItemsChanged"></Pagination>
</div>
<Modal @ref="Modal">
    <ModalDialog  IsScrolling="true" Title="添加节点" IsCentered="true" Size="Size.Large" ShowCloseButton="false">
        <BodyTemplate >
          <NewNode OnClickCallback="OnAddCallbackAsync"></NewNode>
        </BodyTemplate>
    </ModalDialog>
</Modal>

<Modal @ref="UpdateModal">
    <ModalDialog  IsScrolling="true" Title="节点信息编辑" IsCentered="true" Size="Size.Large" ShowCloseButton="false">
        <BodyTemplate >
           <UpdateNode Model="@UpdateModel" OnClickCallback="OnUpdateCallbackAsync"></UpdateNode>
        </BodyTemplate>
    </ModalDialog>
</Modal>

<Modal @ref="RefreshModal">
    <ModalDialog  IsScrolling="true" Title="刷新节点配置数据" IsCentered="true" Size="Size.Large" ShowCloseButton="false">
        <BodyTemplate >
           <RefreshConfigure OnClickCallback="OnRefreshCallbackAsync"></RefreshConfigure>
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {
    private Modal Modal;

    private Modal UpdateModal;
    private Modal RefreshModal;

    public UpdateNodeDto UpdateModel { get; set; }
    //分页数据

    private List<NodeDto>? Nodes { get; set; }

    private int TotalCount { get; set; } = 0;
    private int PageSize { get; set; } = 10;
    private int PageIndex { get; set; } = 1;
    /// <summary>
    /// OnInitialized 方法
    /// </summary>
    protected override void OnInitialized()
    {
        OnQueryAsync();
        base.OnInitialized();
    }
    #region 刷新节点配置数据
    private async void OnRefreshAsync()
    {
        await RefreshModal.Toggle();
    }
    private async void OnRefreshCallbackAsync()
    {
        await Modal.Close();
        OnQueryAsync();
    }
    #endregion
    #region 节点编辑更新
    private async void OnUpdateAsync(int id)
    {
        UpdateModel= await GetAsync(id);
        await UpdateModal.Toggle();
    }
    private async Task<UpdateNodeDto> GetAsync(int id)
    {
        var result = await NodeAppService.GetAsync(id);
        if (result.Code != 0 || result.Data == null)
        {
            await ToastService.Warning("系统警告", "数据不存在");
        }
        var model= TypeAdapter.Adapt<UpdateNodeDto>(result.Data);
        return model;
    }
    private async void OnUpdateCallbackAsync()
    {
        await UpdateModal.Close();
        OnQueryAsync();
    }
    #endregion
    #region 新增节点
    private async void OnAddAsync()
    {
        await Modal.Toggle();
    }
    private async void OnAddCallbackAsync()
    {
        await Modal.Close();
        OnQueryAsync();
    }
    #endregion
    private async Task OnDeleteAsync(int id)
    {
        var result= await NodeAppService.DeleteAsync(id);
        if (result.Code == 0)
        {
            OnQueryAsync();
            await ToastService.Success("系统通知","数据删除成功!");
            return;
        }
        await ToastService.Warning("系统警告","数据删除失败");
    }

    private Task OnPageClick(int pageIndex, int pageItems)
    {
        PageIndex = pageIndex;
        OnQueryAsync();
        return Task.CompletedTask;
    }
    private Task OnPageItemsChanged(int pageItems)
    {
        PageIndex=1;
        PageSize = pageItems;
        OnQueryAsync();
        return Task.CompletedTask;
    }
    private async void OnQueryAsync()
    {
        var result = await NodeAppService.GetNodesAsync(PageIndex, PageSize);

        if (result.Code == 0)
        {
            Nodes = result.Data;
            TotalCount = result.Count;
            StateHasChanged();
        }
        else
        {
            await ToastService.Warning("系统警告", "数据加载失败");
        }
    }

}
